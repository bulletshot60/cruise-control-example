package AbstractAdaptiveCruiseControlRegulator
public
	with Base_Types, AbstractCruiseControlRegulator;
	
	abstract abstract_adaptive_controller extends AbstractCruiseControlRegulator::abstract_controller
		features
			data_source_1: in data port Base_Types::Integer;
			data_source_2: in data port Base_Types::Integer;
		--inherited from parent
		--annex agree {**
		--	assume "speed is positive or 0": current_speed >= 0;
		--	guarantee "speed will only increase if enabled": increase_speed = false or (enabled = true and increase_speed = true);
		--	guarantee "speed will only decrease if enabled": decrease_speed = false or (enabled = true and decrease_speed = true);
		--	guarantee "decrease or increase (not both)": (decrease_speed = false and increase_speed = false) or (decrease_speed != increase_speed);
		--**};
	end abstract_adaptive_controller;
	
	abstract implementation abstract_adaptive_controller.impl extends AbstractCruiseControlRegulator::abstract_controller.impl
		subcomponents
			--use non-abstract implementation
			increase_speed_button: refined to system increase_speed_button.impl;
			--use non-abstract implementation
			decrease_speed_button: refined to system decrease_speed_button.impl;
			decision_engine: abstract decision_engine.impl;
		connections
			increase_speed_button_to_decision_engine_pressed: port increase_speed_button.pressed -> decision_engine.increase_speed_button_pressed;
			increase_speed_button_to_decision_engine_requested: port increase_speed_button.change_speed -> decision_engine.increase_speed_requested;
			decrease_speed_button_to_decision_engine_pressed: port decrease_speed_button.pressed -> decision_engine.decrease_speed_button_pressed;
			decrease_speed_button_to_decision_engine_requested: port decrease_speed_button.change_speed -> decision_engine.decrease_speed_requested;
			data_source_1_in: port data_source_1 -> decision_engine.data_source_1;
			data_source_2_in: port data_source_1 -> decision_engine.data_source_1;
			current_speed_in: port current_speed -> decision_engine.current_speed;
			enabled_to_decision_engine: port enabled -> decision_engine.enabled;
			increase_speed_out: port decision_engine.increase_speed -> increase_speed;
			decrease_speed_out: port decision_engine.decrease_speed -> decrease_speed;
	end abstract_adaptive_controller.impl;
	
	----------------------------------------------------------------------------
	
	abstract decision_engine
		features
			enabled: in data port Base_Types::Boolean;
			increase_speed_button_pressed: in event data port Base_Types::Boolean;
			increase_speed_requested: in data port Base_Types::Boolean;
			decrease_speed_button_pressed: in event data port Base_Types::Boolean;
			decrease_speed_requested: in data port Base_Types::Boolean;
			data_source_1: in data port Base_Types::Integer;
			data_source_2: in data port Base_Types::Integer;
			current_speed: in data port Base_Types::Integer;
			increase_speed: out event data port Base_Types::Boolean;
			decrease_speed: out event data port Base_Types::Boolean;
		annex agree {**
			assume "speed is positive or 0": current_speed >= 0;
			guarantee "speed will only increase if enabled": increase_speed = false or (enabled = true and increase_speed = true);
			guarantee "speed will only decrease if enabled": decrease_speed = false or (enabled = true and decrease_speed = true);
			guarantee "decrease or increase (not both)": (decrease_speed = false and increase_speed = false) or (decrease_speed != increase_speed);
		**};
	end decision_engine;
	
	abstract implementation decision_engine.impl
		annex agree {**
			eq abstract front_data_source_outside_threshold: bool;
			eq abstract rear_data_source_outside_threshold: bool;
			--override parent
			eq speed_should_increase: bool = if rear_data_source_outside_threshold then
				true
			else
				if increase_speed_requested and decrease_speed_requested then
					false
				else
					increase_speed_requested;
			--override parent
			eq speed_should_decrease: bool = if front_data_source_outside_threshold then
				true
			else
				if increase_speed_requested and decrease_speed_requested then
					false
				else
					decrease_speed_requested;
			--inherited from parent
			--assert increase_speed = (speed_should_increase and enabled);
			--assert decrease_speed = (speed_should_decrease and enabled);
		**};
	end decision_engine.impl;
	
	----------------------------------------------------------------------------
	
	--we need to realize this implementation in order to make it useable
	--our extenders will also receive this implementation as a result
	system increase_speed_button extends AbstractCruiseControlRegulator::change_speed_button
		--inherited from parent
		--annex agree {**
		--	guarantee "speed_change only true when pressed": pressed = change_speed; 
		--**};
	end increase_speed_button;
	
	system implementation increase_speed_button.impl extends AbstractCruiseControlRegulator::change_speed_button.impl
		--inherited from parent
		--annex agree {**
		--	assert change_speed = if pressed then true else false;
		--**};
	end increase_speed_button.impl;
	
	----------------------------------------------------------------------------
	
	--we need to realize this implementation in order to make it useable
	--our extenders will also receive this implementation as a result
	system decrease_speed_button extends AbstractCruiseControlRegulator::change_speed_button
		--inherited from parent
		--annex agree {**
		--	guarantee "speed_change only true when pressed": pressed = change_speed;
		--**};
	end decrease_speed_button;
	
	system implementation decrease_speed_button.impl extends AbstractCruiseControlRegulator::change_speed_button.impl
		--inherited from parent
		--annex agree {**
		--	assert change_speed = if pressed then true else false;
		--**};
	end decrease_speed_button.impl;
	
end AbstractAdaptiveCruiseControlRegulator;
